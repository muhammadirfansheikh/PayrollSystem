using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using DAL;
using System.Data;
using System.Web.UI.HtmlControls;
using System.IO;
using System.Transactions;

public partial class Pages_ProvidentFund_PFLoan : Base
{
    #region Properties

    public string _EmployeeId
    {
        get
        {
            return Request.QueryString["id"];
        }
    }

    public string _SeperationCriteriaId
    {
        get
        {
            if (Request.QueryString["SeperationCriteriaId"] == null)
            {
                return Convert.ToString((int)Constant.SeperationCriteriaMaster.PfInitiateLoan);
            }
            else
            {
                return Request.QueryString["SeperationCriteriaId"];
            }
        }
        //set
        //{
        //    Convert.ToString((int)Constant.SeperationCriteriaMaster.PfInitiateLoan);
        //}
    }

    public string _WorkflowMasterId
    {
        get
        {
            if (Request.QueryString["WorkflowMasterId"] == null)
            {
                return Convert.ToString((int)Constant.Workflow.PfLoan);
            }
            else
            {
                return Request.QueryString["WorkflowMasterId"];
            }
        }

       
    }

    #endregion

    Sybrid_DatabaseEntities context = new Sybrid_DatabaseEntities();

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            //if (_SeperationCriteriaId == null)
            //{
            //    _SeperationCriteriaId = Convert.ToString((int)Constant.SeperationCriteriaMaster.PfInitiateLoan);
            //}

            BindData();
            SetWorkflowStep();

            

            //int SeperationCriteriaId = Convert.ToInt32(_SeperationCriteriaId);
            //if (SeperationCriteriaId != (int)Constant.SeperationCriteriaMaster.PfInitiateLoan)
            //{
                
            //}
        }
    }

    public void BindData()
    {
        int SeperationCriteriaId = Convert.ToInt32(_SeperationCriteriaId);
        int WorkflowMasterId = Convert.ToInt32(_WorkflowMasterId);

        var ListHRStarterCriteria = context.HRMS_Setup_WorkflowFormDetail.Where(a => a.IsActive == true && a.FormMasterId == SeperationCriteriaId && a.HRMS_Setup_WorkflowFormMaster.WorkflowMasterId == WorkflowMasterId)
           .Select(c => new
           {
               SeperationCriteriaDetailId = c.FormDetailId,
               SeperationCriteriaDetail = c.FieldName,
               ValueTypeId = c.ValueTypeId,
               TableName = c.TableName,
           }).ToList();

        rpt.DataSource = ListHRStarterCriteria;
        rpt.DataBind();

        int EmployeeId = Convert.ToInt32(_EmployeeId) == 0 ? UserKey : Convert.ToInt32(_EmployeeId);
        PfLoanEmployeeDetail.EmployeeId = EmployeeId;

    }

    public void Upload(int WorkFlowTaskMasterId)
    {
        //Base objBase = new Base();
        Random rnd = new Random();
        DateTime dt = DateTime.Now;

        try
        {
            if (FileUpload.HasFile)
            {
                foreach (HttpPostedFile postedFile in FileUpload.PostedFiles)
                {
                    HRMS_PFLoanDocument obj = new HRMS_PFLoanDocument();


                    //objHRMS_ApplicantApplication.Filecomments = txtComment.Text.Trim();
                    string fileName = Path.GetFileName(postedFile.FileName);
                    //HRMS_PFLoanDocument.FileOriginalName = fileName;
                    string ImageName = dt.ToString("ddMMyyy") + "-" + rnd.Next(999999).ToString() + "-" + WorkFlowTaskMasterId + fileName;


                    obj.WorkflowTaskMasterId = WorkFlowTaskMasterId;
                    obj.Path = ImageName;

                    obj.IsActive = true;
                    obj.CreatedBy = UserKey;
                    obj.CreatedDate = dt;
                    obj.UserIP = UserIP;
                   
                    postedFile.SaveAs(Server.MapPath("~/Uploads/") + ImageName);

                    context.HRMS_PFLoanDocument.Add(obj);
                    context.SaveChanges();
                }
            }



        }
        catch (Exception ex)
        {
            //lblError.Text = ex.Message;
            //divError.Visible = true;

            string _Message = ex.ToString();

            string PageRedirectUrl = "#";

            ScriptManager.RegisterStartupScript(this, GetType(), "SweetAlert", "OpenDialogError('error','" + _Message + "','error','" + PageRedirectUrl + "');", true);

        }
    }

    protected void btnSave_Click(object sender, EventArgs e)
    {
        try
        {
            int SeperationCriteriaId = Convert.ToInt32(_SeperationCriteriaId);
            int WorkflowMasterId = Convert.ToInt32(_WorkflowMasterId);
            int EmployeeId = Convert.ToInt32(_EmployeeId);
            int WorkflowTaskMasterId = 0;

            if (SeperationCriteriaId == (int)Constant.SeperationCriteriaMaster.PfInitiateLoan)
            {
                EmployeeId = UserKey;


            }

            using (TransactionScope scope = new TransactionScope())
            {
                WorkflowTaskMasterId = Task();

                for (int i = 0; i < rpt.Items.Count; i++)
                {
                    HtmlInputHidden hfSeperationCriteriaDetailId = (HtmlInputHidden)rpt.Items[i].FindControl("hfSeperationCriteriaDetailId");
                    int SeperationCriteriaDetailId = Convert.ToInt32(hfSeperationCriteriaDetailId.Value);
                    int? StatusId = null;
                    string Remark = "";

                    RadioButtonList rbtnEvaluationStatus = (RadioButtonList)rpt.Items[i].FindControl("rbtnEvaluationStatus");
                    DropDownList dllEvaluationStatus = (DropDownList)rpt.Items[i].FindControl("dllEvaluationStatus");

                    TextBox txtComment = (TextBox)rpt.Items[i].FindControl("txtComment");
                    TextBox txtDate = (TextBox)rpt.Items[i].FindControl("txtDate");
                    TextBox txtTextBox = (TextBox)rpt.Items[i].FindControl("txtTextBox");


                    if (rbtnEvaluationStatus.Visible == true)
                    {
                        StatusId = Convert.ToInt32(rbtnEvaluationStatus.SelectedValue);
                    }
                    else if (dllEvaluationStatus.Visible == true)
                    {

                        StatusId = Convert.ToInt32(dllEvaluationStatus.SelectedValue);
                    }
                    else if (txtComment.Visible == true)
                    {
                        Remark = Convert.ToString(txtComment.Text.Trim());
                    }
                    else if (txtTextBox.Visible == true)
                    {
                        Remark = Convert.ToString(txtTextBox.Text.Trim());
                    }
                    else if (txtDate.Visible == true)
                    {
                        Remark = Convert.ToString(txtDate.Text.Trim());
                    }

                    if (WorkflowMasterId == (int)Constant.Workflow.PfLoan)
                    {

                        HRMS_PFLoanDetail objPf = new HRMS_PFLoanDetail();

                        objPf.WorkflowTaskMasterId = WorkflowTaskMasterId;

                        objPf.EmployeeId = EmployeeId;
                        objPf.StatusId = StatusId;
                        objPf.FormDetailId = SeperationCriteriaDetailId;
                        objPf.Value = Remark;
                        objPf.IsActive = true;
                        objPf.CreatedBy = UserKey;
                        objPf.CreatedDate = DateTime.Now;
                        objPf.UserIP = UserIP;

                        context.HRMS_PFLoanDetail.Add(objPf);
                        context.SaveChanges();

                    }
                    else if (WorkflowMasterId == (int)Constant.Workflow.MedReimbursment)
                    {

                    }
                }

                Upload(WorkflowTaskMasterId);

                scope.Complete();
            }



            string _Message = "Saved Successfully";

            string PageRedirectUrl = "/Pages/TaskListing.aspx";

            ScriptManager.RegisterStartupScript(this, GetType(), "SweetAlert", "OpenRedirectionDialog('Success','" + _Message + "','success','" + PageRedirectUrl + "');", true);
        }
        catch (Exception ex)
        {
            divError.Visible = true;
            lblError.InnerText = ex.ToString();

        }
    }

    protected void rpt_ItemDataBound(object sender, RepeaterItemEventArgs e)
    {
        try
        {

            int EmployeeId = Convert.ToInt32(_EmployeeId);
            int SeperationCriteriaId = Convert.ToInt32(_SeperationCriteriaId);

            if (e.Item.ItemType == ListItemType.AlternatingItem || e.Item.ItemType == ListItemType.Item)
            {
                RadioButtonList rbtnEvaluationStatus = (RadioButtonList)e.Item.FindControl("rbtnEvaluationStatus");
                DropDownList ddlEvaluationStatus = (DropDownList)e.Item.FindControl("dllEvaluationStatus");
                TextBox txtComment = (TextBox)e.Item.FindControl("txtComment");
                TextBox txtDate = (TextBox)e.Item.FindControl("txtDate");
                TextBox txtText = (TextBox)e.Item.FindControl("txtTextBox");

                HtmlInputHidden hfSeperationCriteriaDetailId = (HtmlInputHidden)e.Item.FindControl("hfSeperationCriteriaDetailId");
                HtmlInputHidden hfTableName = (HtmlInputHidden)e.Item.FindControl("hfTableName");
                HtmlInputHidden hfValueTypeId = (HtmlInputHidden)e.Item.FindControl("hfValueTypeId");

                int SeperationCriteriaDetailId = Convert.ToInt32(hfSeperationCriteriaDetailId.Value);
                int ValueTypeId = Convert.ToInt32(hfValueTypeId.Value);
                string TableName = hfTableName.Value;

                //var list = context.HRMS_Setup_WorkflowFormDetail.FirstOrDefault(a => a.IsActive == true && a.FormDetailId == SeperationCriteriaDetailId);


                if ((int)Constant.ValueTypeControl.Textbox == ValueTypeId)
                {
                    if (TableName == string.Empty)
                    {
                        txtComment.Visible = true;
                        //txtComment.TextMode = TextBoxMode.Number;
                    }
                }
                else if ((int)Constant.ValueTypeControl.TextboxSimple == ValueTypeId)
                {
                    if (TableName == string.Empty)
                    {
                        txtText.Visible = true;

                        if (SeperationCriteriaDetailId == (int)Constant.CriteriaDetail.RecomendedLoanAmount)
                        {
                            int WorkFlowTaskMasterId = CommonHelper.GetWorkflowTaskMasterId(Convert.ToInt32(_EmployeeId), (int)Constant.Workflow.PfLoan);

                            var lst = context.HRMS_PFLoanDetail.Where(a => a.IsActive == true && a.WorkflowTaskMasterId == WorkFlowTaskMasterId && a.FormDetailId == (int)Constant .CriteriaDetail.LoanAmount).FirstOrDefault();

                            txtText.Text = lst.Value;
                        }

                        if (SeperationCriteriaDetailId == (int)Constant.SeperationCriteriaMaster.PfInitiateLoan)
                        {
                            txtText.Attributes.Add("class", "form-control col-lg-2 numeric");

                            //divRadioButton.Attributes.Add("class", "col-lg-4");
                        }
                    }
                }
                else if ((int)Constant.ValueTypeControl.RadioButton == ValueTypeId)
                {
                    if (TableName == "HRMS_Setup_SeprationStatus")
                    {
                        int StatusYes = (int)Constant.SeperationStatus.Yes;
                        int StatusNo = (int)Constant.SeperationStatus.No;

                        var rbtlist = context.HRMS_Setup_SeprationStatus.Where(a => a.IsActive == true && (a.SeperationStatusId == StatusYes || a.SeperationStatusId == StatusNo))
                            .Select(c => new
                            {
                                Id = c.SeperationStatusId,
                                Value = c.SeperationStatus,

                            }).ToList();

                        CommonHelper.BindRadioButtonList(rbtnEvaluationStatus, rbtlist, "Value", "Id", false, false);
                        rbtnEvaluationStatus.Visible = true;
                        rbtnEvaluationStatus.Items[0].Selected = true;
                    }

                    /*if (list.TableName == "HRMS_Setup_SeprationStatus")
                    {
                        int StatusYes = (int)Constant.SeperationStatus.Yes;
                        int StatusNo = (int)Constant.SeperationStatus.No;
                        int Suspended = (int)Constant.SeperationStatus.Suspended;

                        var rbtlist = context.HRMS_Setup_SeprationStatus.Where(a => a.IsActive == true && (a.SeperationStatusId == StatusYes || a.SeperationStatusId == Suspended || a.SeperationStatusId == StatusNo))
                            .Select(c => new
                            {
                                Id = c.SeperationStatusId,
                                Value = c.SeperationStatus,

                            }).ToList();

                        CommonHelper.BindRadioButtonList(rbtnEvaluationStatus, rbtlist, "Value", "Id", false, false);
                        rbtnEvaluationStatus.Visible = true;
                        rbtnEvaluationStatus.Items[0].Selected = true;
                    }
                    else if (list.TableName == "HRMS_Setup_TerminationType")
                    {
                        int Resigned = (int)Constant.TerminationType.Resigned;
                        int Layoff = (int)Constant.TerminationType.Layoff;
                        int Dissmiss = (int)Constant.TerminationType.Dissmiss;

                        var rbtlist = context.HRMS_Setup_TerminationType.Where(a => a.IsActive == true)
                            .Select(c => new
                            {
                                Id = c.TerminationTypeId,
                                Value = c.TerminationType,

                            }).ToList();

                        CommonHelper.BindRadioButtonList(rbtnEvaluationStatus, rbtlist, "Value", "Id", false, false);
                        rbtnEvaluationStatus.Visible = true;
                        rbtnEvaluationStatus.Items[0].Selected = true;
                    }
                    if (list.TableName == null)
                    {
                        int StatusYes = (int)Constant.SeperationStatus.Yes;
                        int StatusNo = (int)Constant.SeperationStatus.No;
                        //int Suspended = (int)Constant.SeperationStatus.Suspended;

                        var rbtlist = context.HRMS_Setup_SeprationStatus.Where(a => a.IsActive == true && (a.SeperationStatusId == StatusYes || a.SeperationStatusId == StatusNo))
                            .Select(c => new
                            {
                                Id = c.SeperationStatusId,
                                Value = c.SeperationStatus,

                            }).ToList();

                        CommonHelper.BindRadioButtonList(rbtnEvaluationStatus, rbtlist, "Value", "Id", false, false);
                        rbtnEvaluationStatus.Visible = true;
                        rbtnEvaluationStatus.Items[0].Selected = true;
                    }*/

                    //     CommonHelper.BindRadioButtonList(rbtnEvaluationStatus, ListInterViewEvaluationStatus, "Value", "Id", false, false);

                }
                else if ((int)Constant.ValueTypeControl.Dropdown == ValueTypeId)
                {
                    /*if (list.TableName == "HRMS_Setup_SeprationStatus")
                    {
                        int StatusYes = (int)Constant.SeperationStatus.Yes;
                        int StatusNo = (int)Constant.SeperationStatus.No;


                        var ddlist = context.HRMS_Setup_SeprationStatus.Where(a => a.IsActive == true && a.SeperationStatusId == StatusYes
                            || a.SeperationStatusId == StatusNo)
                            .Select(c => new
                            {
                                Id = c.SeperationStatusId,
                                Value = c.SeperationStatus,

                            }).ToList();

                        CommonHelper.BindDropDown(ddlEvaluationStatus, ddlist, "Value", "Id", false, false);
                        ddlEvaluationStatus.Visible = true;
                    }
                    else if (list.TableName == "HRMS_Setup_NoticePeriodType")
                    {
                        var ddlist = context.HRMS_Setup_NoticePeriodType.Where(a => a.IsActive == true)
                            .Select(c => new
                            {
                                Id = c.NoticePeriodTypeId,
                                Value = c.NoticePeriodType,

                            }).ToList();

                        CommonHelper.BindDropDown(ddlEvaluationStatus, ddlist, "Value", "Id", false, false);
                        ddlEvaluationStatus.Visible = true;
                    }*/
                }
                else if ((int)Constant.ValueTypeControl.DatePicker == ValueTypeId)
                {
                    if (TableName == string.Empty)
                    {
                        txtDate.Visible = true;
                    }
                }
            }
        }
        catch (Exception ex)
        {


            string _Message = ex.InnerException.ToString();

            string PageRedirectUrl = "#";

            ScriptManager.RegisterStartupScript(this, GetType(), "SweetAlert", "OpenRedirectionDialog('error','" + _Message + "','error','" + PageRedirectUrl + "');", true);

        }
    }

    private void BindDecision(int WorkflowStepDetailId)
    {
        var lst = context.HRMS_SetupDetail.Where(a => a.IsActive == true && a.SetupMasterId == (int)Constant.RequisitionSetupMaster.WorkflowDecision
            &&
            a.SetupDetailId != (int)Constant.RequisitionSetupDetail.Negotiate &&
            a.SetupDetailId != (int)Constant.RequisitionSetupDetail.ApprovedAfterNegotiate
            &&
            a.SetupDetailId != (int)Constant.RequisitionSetupDetail.RejectAfterNegotiate

            )

            .Select(a => new
            {
                DecisionId = a.SetupDetailId,
                Decision = a.SetupDetailName
            })
            .ToList();

        CommonHelper.BindRadioButtonList(rdbtnlstDecision, lst, "Decision", "DecisionId", false, false);

        if (lst != null && lst.Count > 0)
        {
            rdbtnlstDecision.Items[0].Selected = true;

        }
    }

    private void SetWorkflowStep()
    {
        int WorkflowStepDetailId = Convert.ToInt32(_SeperationCriteriaId) == (int)Constant.SeperationCriteriaMaster.PfInitiateLoan ? (int)Constant.WorkflowStepPfLoan.InitiatePfLoan :
      Convert.ToInt32(_SeperationCriteriaId) == (int)Constant.SeperationCriteriaMaster.PfHodForm ? (int)Constant.WorkflowStepPfLoan.HodApproval :
       Convert.ToInt32(_SeperationCriteriaId) == (int)Constant.SeperationCriteriaMaster.PfPayrollForm ? (int)Constant.WorkflowStepPfLoan.Payroll : 0;

        lblStep.Text = context.HRMS_Setup_WorkflowStepDetail.Where(a => a.IsActive == true && a.WorkflowStepDetailId == WorkflowStepDetailId).FirstOrDefault().StepName;

        if (WorkflowStepDetailId == (int)Constant.WorkflowStepPfLoan.HodApproval || WorkflowStepDetailId == (int)Constant.WorkflowStepPfLoan.Payroll)
        {
            divRadioButton.Visible = true;
            BindDecision(WorkflowStepDetailId);

            divCommentHistory.Visible = true;
            int WFTaskId = CommonHelper.GetWorkflowTaskMasterId(Convert.ToInt32(_EmployeeId), (int)Constant.Workflow.PfLoan); ;

            PfLoanCommentHistory.IsControlInitialize = true;
            PfLoanCommentHistory._SeperationCriteriaId = (int)Constant.SeperationCriteriaMaster.PfInitiateLoan;
            PfLoanCommentHistory._WorkflowTaskMasterId = Convert.ToInt32(WFTaskId);
        }
        else
        {
            PfLoanCommentHistory.IsControlInitialize = false;
            divAttachment.Visible = true;
        }
    }

    private int Task()
    {
        int WorkflowStepDetailId = Convert.ToInt32(_SeperationCriteriaId) == (int)Constant.SeperationCriteriaMaster.PfInitiateLoan ? (int)Constant.WorkflowStepPfLoan.InitiatePfLoan :
            Convert.ToInt32(_SeperationCriteriaId) == (int)Constant.SeperationCriteriaMaster.PfHodForm ? (int)Constant.WorkflowStepPfLoan.HodApproval :
             Convert.ToInt32(_SeperationCriteriaId) == (int)Constant.SeperationCriteriaMaster.PfPayrollForm ? (int)Constant.WorkflowStepPfLoan.Payroll : 0;

        // Convert.ToInt32(_SeperationCriteriaId) == (int)Constant.SeperationCriteriaMaster.HR ? (int)Constant.WorkflowStepSeperation.HRClearenceTask :
        //Convert.ToInt32(_SeperationCriteriaId) == (int)Constant.SeperationCriteriaMaster.Finance ? (int)Constant.WorkflowStepSeperation.Finance :
        //Convert.ToInt32(_SeperationCriteriaId) == (int)Constant.SeperationCriteriaMaster.HOD ? (int)Constant.WorkflowStepSeperation.HODClearenceTask : 0;

        int WorkflowMasterId = Convert.ToInt32(_WorkflowMasterId);
        int EmployeeId = Convert.ToInt32(_EmployeeId);
        int WorkflowItemId = Convert.ToInt32(EmployeeId);
        bool IsEmailRequired = false, IsApprovalTask = false;
        int NxtWorkflowStepDetailId = 0;
        int WorkflowTaskMasterId = 0;

        if (WorkflowStepDetailId == (int)Constant.WorkflowStepPfLoan.InitiatePfLoan)
        {
            var lstWorkflowNxtStep = context.HRMS_WorkflowStepActionDetail.Where(a => a.IsActive == true && a.WorkflowStepDetailId == WorkflowStepDetailId).ToList();

            if (lstWorkflowNxtStep != null && lstWorkflowNxtStep.Count > 0)
            {
                EmployeeId = UserKey;

                HRMS_WorkFlowTaskMaster task = new HRMS_WorkFlowTaskMaster();

                task.WorkflowItemId = EmployeeId;
                task.WorkflowStatusId = (int)Constant.WorkflowStatus.InProgress;
                task.Remarks = "";
                task.IsActive = true;
                task.CreatedDate = DateTime.Now;
                task.CreatedBy = UserKey;
                task.UserIP = UserIP;
                task.WorkflowMasterId = WorkflowMasterId;

                context.HRMS_WorkFlowTaskMaster.Add(task);
                context.SaveChanges();

                WorkflowTaskMasterId = task.WorkflowTaskMasterId;

                int? DepartmentId = context.Setup_Employee.FirstOrDefault(a => a.IsActive == true && a.EmployeeId == EmployeeId).DepartmentId;

                for (int k = 0; k < lstWorkflowNxtStep.Count; k++)
                {
                    NxtWorkflowStepDetailId = lstWorkflowNxtStep[k].NextWorkflowStepDetailId;
                    var lst = context.HRMS_WorkflowMemberDetail.Where(a => a.IsActive == true && (NxtWorkflowStepDetailId == (int)Constant.WorkflowStepPfLoan.HodApproval ? a.DepartmentId == DepartmentId : true))
                   .Where(a => a.WorkflowStepDetailId == NxtWorkflowStepDetailId)
                   .Where(a => a.MemberCategoryId == (int)Constant.WorkflowMemberCategory.Management).ToList();

                    if (lst != null && lst.Count > 0)
                    {
                        for (int i = 0; i < lst.Count; i++)
                        {
                            int MemberCategoryId = lst[i].MemberCategoryId;
                            int DeptId = lst[i].DepartmentId;

                            var lstAssignee = context.HRMS_Setup_WorkFlowMemberDetail.Where(a => a.IsActive == true && a.MemberCategoryId == MemberCategoryId &&
                                a.DepartmentID == DeptId)
                                .Select(a => new
                                {
                                    AssigneeId = a.EmployeeID
                                })
                                .ToList();


                            for (int j = 0; j < lstAssignee.Count; j++)
                            {
                                int AssigneeId = lstAssignee[j].AssigneeId;

                                HRMS_WorkflowTaskDetail taskDetail = new HRMS_WorkflowTaskDetail();

                                taskDetail.WorkflowTaskMasterId = WorkflowTaskMasterId;
                                taskDetail.AssigneeID = AssigneeId;
                                taskDetail.IsDelegated = false;
                                // taskDetail.WorkflowStepDetailId = NxtWorkflowStepDetailId;
                                taskDetail.WorkflowStepDetailId = NxtWorkflowStepDetailId;
                                taskDetail.StartDate = DateTime.Now;
                                taskDetail.WorkflowTaskStatusId = (int)Constant.WorkflowTaskStatus.Pending;
                                taskDetail.Remarks = "";
                                taskDetail.IsActive = true;
                                taskDetail.CreatedBy = UserKey;
                                taskDetail.CreatedDate = DateTime.Now;
                                taskDetail.UserIP = UserIP;

                                context.HRMS_WorkflowTaskDetail.Add(taskDetail);
                                context.SaveChanges();

                                if (IsEmailRequired) // send email
                                {
                                    string ToEmail = context.Setup_Employee.Where(a => a.EmployeeId == AssigneeId).FirstOrDefault().OfficeEmailAddress;

                                    string Msg = "Your approval is required for PF Loan request. \n" +
                                        "<html>  <a href='" + CommonHelper.URL + "Pages/NewHiring/SeperationApproval.aspx?id=" + EmployeeId + "&WorkflowStepDetailId=" + WorkflowStepDetailId + "&WorkflowMasterId=" + Convert.ToString((int)Constant.Workflow.NewHiringWorkflow) + "'>Click Here</a>  </html>";

                                    //  NewHiring/Approval.aspx?id=" + CandidateId + "&WorkflowStepDetailId=" + WorkflowStepDetailId + "&WorkflowMasterId=" + Convert.ToString( (int)Constant.Workflow.NewHiringWorkflow)

                                    CommonHelper.GenerateWorkflowEmail(ToEmail, "", WorkflowStepDetailId, Msg);
                                }
                            }
                        }
                    }
                    else
                    {
                        bool IsAssign = CommonHelper.AssignTaskToHR(WorkflowTaskMasterId, NxtWorkflowStepDetailId, DateTime.Now);

                        if (IsAssign)
                        {
                            ScriptManager.RegisterStartupScript(this, GetType(), "Alert", "alert('No Mapping Exist Against this Workflow Step, The Task is assigned to HRMS Admin');", true);
                        }
                    }
                }
            }
        }
        else
        {
            IsApprovalTask = true;

            WorkflowTaskMasterId = context.HRMS_WorkFlowTaskMaster.Where(a => a.IsActive == true &&
                               a.WorkflowMasterId == WorkflowMasterId && a.WorkflowItemId == WorkflowItemId).OrderByDescending(a => a.WorkflowTaskMasterId).FirstOrDefault().WorkflowTaskMasterId;

            var lstWorkflowTaskDetail = context.HRMS_WorkflowTaskDetail.Where(a => a.IsActive == true && a.WorkflowTaskMasterId == WorkflowTaskMasterId &&
                a.WorkflowStepDetailId == WorkflowStepDetailId && a.WorkflowTaskStatusId == (int)Constant.WorkflowTaskStatus.Pending).ToList();

            if (lstWorkflowTaskDetail != null && lstWorkflowTaskDetail.Count > 0)
            {
                int WorkflowTaskDetailIdApproved = 0;

                for (int i = 0; i < lstWorkflowTaskDetail.Count; i++)
                {
                    int WorkflowTaskDetailId = lstWorkflowTaskDetail[i].WorkflowTaskDetailId;

                    HRMS_WorkflowTaskDetail td = context.HRMS_WorkflowTaskDetail.Where(a => a.WorkflowTaskDetailId == WorkflowTaskDetailId).FirstOrDefault();

                    td.WorkflowTaskStatusId = (int)Constant.WorkflowTaskStatus.Completed;
                    td.ModifiedBy = UserKey;
                    td.ModifiedDate = DateTime.Now;
                    td.UserIP = UserIP;
                    int? IntNull = null;
                    td.DecisionId = IsApprovalTask == true ? Convert.ToInt32(rdbtnlstDecision.SelectedValue) : IntNull;

                    if (td.AssigneeID == UserKey)
                    {
                        td.EndDate = DateTime.Now;
                        //td.Remarks = txtComments.Text;

                        WorkflowTaskDetailIdApproved = WorkflowTaskDetailId;
                    }
                    context.SaveChanges();
                }
            }

            var lstWorkflowNxtStep = context.HRMS_WorkflowStepActionDetail.Where(a => a.IsActive == true && a.WorkflowStepDetailId == WorkflowStepDetailId).ToList();

            if (lstWorkflowNxtStep != null && lstWorkflowNxtStep.Count > 0)
            {
                for (int ii = 0; ii < lstWorkflowNxtStep.Count; ii++)
                {
                    NxtWorkflowStepDetailId = 0;
                    if (IsApprovalTask)
                    {
                        if (rdbtnlstDecision.SelectedValue == Convert.ToString((int)Constant.RequisitionSetupDetail.Approved))
                        {
                            if (lstWorkflowNxtStep[ii].IsApproved == true)
                            {
                                IsEmailRequired = lstWorkflowNxtStep[ii].HRMS_Setup_WorkflowStepDetail.IsEmailRequired == null ? false : Convert.ToBoolean(lstWorkflowNxtStep[ii].HRMS_Setup_WorkflowStepDetail.IsEmailRequired);
                                NxtWorkflowStepDetailId = lstWorkflowNxtStep[ii].NextWorkflowStepDetailId;
                                //break;
                            }
                        }
                        else if (rdbtnlstDecision.SelectedValue == Convert.ToString((int)Constant.RequisitionSetupDetail.Rejected) || rdbtnlstDecision.SelectedValue == Convert.ToString((int)Constant.RequisitionSetupDetail.Negotiate))
                        {
                            if (lstWorkflowNxtStep[ii].IsApproved == false)
                            {
                                IsEmailRequired = lstWorkflowNxtStep[ii].HRMS_Setup_WorkflowStepDetail.IsEmailRequired == null ? false : Convert.ToBoolean(lstWorkflowNxtStep[ii].HRMS_Setup_WorkflowStepDetail.IsEmailRequired);
                                NxtWorkflowStepDetailId = lstWorkflowNxtStep[ii].NextWorkflowStepDetailId;
                                //break;
                            }
                        }
                    }
                    else
                    {
                        if (lstWorkflowNxtStep[ii].IsApproved == true)
                        {
                            IsEmailRequired = lstWorkflowNxtStep[ii].HRMS_Setup_WorkflowStepDetail.IsEmailRequired == null ? false : Convert.ToBoolean(lstWorkflowNxtStep[ii].HRMS_Setup_WorkflowStepDetail.IsEmailRequired);
                            NxtWorkflowStepDetailId = lstWorkflowNxtStep[ii].NextWorkflowStepDetailId;
                            //break;
                        }
                    }

                    if (NxtWorkflowStepDetailId > 0)
                    {
                        if (NxtWorkflowStepDetailId == (int)Constant.WorkflowStepPfLoan.Terminate)
                        {

                            var lstTaskMaster = context.HRMS_WorkFlowTaskMaster.Where(a => a.IsActive == true && a.WorkflowTaskMasterId == WorkflowTaskMasterId).ToList();

                            lstTaskMaster.ForEach(a => a.WorkflowStatusId = (int)Constant.WorkflowStatus.Completed);
                            lstTaskMaster.ForEach(a => a.ModifiedBy = UserKey);
                            lstTaskMaster.ForEach(a => a.UserIP = UserIP);
                            lstTaskMaster.ForEach(a => a.ModifiedDate = DateTime.Now);

                            context.SaveChanges();

                            break;

                        }
                        else
                        {
                            var lst = context.HRMS_WorkflowMemberDetail.Where(a => a.IsActive == true)
                                       .Where(a => a.WorkflowStepDetailId == NxtWorkflowStepDetailId)
                                       .Where(a => a.MemberCategoryId == (int)Constant.WorkflowMemberCategory.Management).ToList();

                            if (lst.Count > 0 && lst != null)
                            {
                                for (int i = 0; i < lst.Count; i++)
                                {
                                    int MemberCategoryId = lst[i].MemberCategoryId;
                                    int DeptId = lst[i].DepartmentId;

                                    var lstAssignee = context.HRMS_Setup_WorkFlowMemberDetail.Where(a => a.IsActive == true && a.MemberCategoryId == MemberCategoryId && a.DepartmentID == DeptId)
                                        .Select(a => new
                                        {
                                            AssigneeId = a.EmployeeID
                                        })
                                        .ToList();


                                    for (int j = 0; j < lstAssignee.Count; j++)
                                    {
                                        int AssigneeId = lstAssignee[j].AssigneeId;

                                        HRMS_WorkflowTaskDetail taskDetail = new HRMS_WorkflowTaskDetail();

                                        taskDetail.WorkflowTaskMasterId = WorkflowTaskMasterId;
                                        taskDetail.AssigneeID = AssigneeId;
                                        taskDetail.IsDelegated = false;
                                        taskDetail.WorkflowStepDetailId = NxtWorkflowStepDetailId;
                                        taskDetail.StartDate = DateTime.Now;
                                        taskDetail.WorkflowTaskStatusId = (int)Constant.WorkflowTaskStatus.Pending;
                                        //taskDetail.Remarks = txtComments.Text;
                                        taskDetail.IsActive = true;
                                        taskDetail.CreatedBy = UserId;
                                        taskDetail.CreatedDate = DateTime.Now;
                                        taskDetail.UserIP = UserIP;

                                        context.HRMS_WorkflowTaskDetail.Add(taskDetail);
                                        context.SaveChanges();

                                        if (IsEmailRequired) // send email
                                        {
                                            string ToEmail = context.Setup_Employee.Where(a => a.EmployeeId == AssigneeId).FirstOrDefault().OfficeEmailAddress;

                                            string Msg = "Your approval is required for New hiring request. \n" +
                                                "<html>  <a href='" + CommonHelper.URL + "Pages/NewHiring/Approval.aspx?id=" + WorkflowItemId + "&WorkflowStepDetailId=" + WorkflowStepDetailId + "&WorkflowMasterId=" + Convert.ToString((int)Constant.Workflow.NewHiringWorkflow) + "'>Click Here</a>  </html>";

                                            CommonHelper.GenerateWorkflowEmail(ToEmail, "", WorkflowStepDetailId, Msg);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                bool IsAssign = CommonHelper.AssignTaskToHR(WorkflowTaskMasterId, NxtWorkflowStepDetailId, DateTime.Now);

                                if (IsAssign)
                                {
                                    ScriptManager.RegisterStartupScript(this, GetType(), "Alert", "alert('No Mapping Exist Against this Workflow Step, The Task is assigned to HRMS Admin');", true);
                                }
                            }
                        }
                    }
                }
            }
        }

        //if (WorkflowStepDetailId == (int)Constant.WorkflowStepNewHiring.DeptAcknowledgementAdminStarter || WorkflowStepDetailId == (int)Constant.WorkflowStepNewHiring.DeptAcknowledgementITStarter)
        {
            int TaskCount = context.HRMS_WorkflowTaskDetail.Count(a => a.IsActive == true && a.WorkflowTaskMasterId == WorkflowTaskMasterId
                && a.WorkflowStepDetailId != (int)Constant.WorkflowStepPfLoan.Terminate
                //&& a.WorkflowStepDetailId != (int)Constant.WorkflowStepSeperation.HRExitInterview
                && a.WorkflowTaskStatusId == (int)Constant.WorkflowTaskStatus.Pending);

            if (TaskCount == 0)
            {
                var lstTaskMaster = context.HRMS_WorkFlowTaskMaster.Where(a => a.IsActive == true && a.WorkflowItemId == WorkflowItemId).ToList();

                lstTaskMaster.ForEach(a => a.WorkflowStatusId = (int)Constant.WorkflowStatus.Completed);
                lstTaskMaster.ForEach(a => a.ModifiedBy = UserId);
                lstTaskMaster.ForEach(a => a.UserIP = UserIP);
                lstTaskMaster.ForEach(a => a.ModifiedDate = DateTime.Now);

                context.SaveChanges();
            }
        }


        string _Message = "Saved Successfully";

        string PageRedirectUrl = "/Pages/TaskListing.aspx";

        ScriptManager.RegisterStartupScript(this, GetType(), "SweetAlert", "OpenRedirectionDialog('Success','" + _Message + "','success','" + PageRedirectUrl + "');", true);

        return WorkflowTaskMasterId;
    }

    //private int GetWorkflowTaskMasterId(int WorkflowItemId,int WorkflowMasterId)
    //{
    //    int WorkflowTaskMasterId = 0;
    //    //int WorkflowItemId = Convert.ToInt32(_EmployeeId);

    //    WorkflowTaskMasterId = context.HRMS_WorkFlowTaskMaster.Where(a => a.IsActive == true &&
    //                           a.WorkflowMasterId == WorkflowMasterId && a.WorkflowItemId == WorkflowItemId).OrderByDescending(a => a.WorkflowTaskMasterId).FirstOrDefault().WorkflowTaskMasterId;


    //    return WorkflowTaskMasterId;
    //}

    protected void btnCancel_Click(object sender, EventArgs e)
    {
        Response.Redirect("/Pages/TaskListing.aspx");
    }
}