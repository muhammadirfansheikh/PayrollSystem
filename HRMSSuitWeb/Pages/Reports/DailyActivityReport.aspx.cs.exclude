using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using DAL;
using System.IO;

public partial class Pages_Reports_DailyActivityReport : Base
{
    Sybrid_DatabaseEntities context = new Sybrid_DatabaseEntities();
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            string numberOfdays = DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month).ToString();
            txtStartDate.Text = DateTime.Now.Month.ToString() + "/01/" + DateTime.Now.Year;
            txtEndDate.Text = DateTime.Now.Month.ToString() + "/" + numberOfdays + "/" + DateTime.Now.Year;
            BindDropDown();
        }
        PagingHandler();
    }

    private void BindDropDown()
    {
        string roleAdmin = Convert.ToString((int)Constant.Role.Admin);


        var department = context.Setup_Department.Where(e => e.IsActive == true)
            .OrderBy(e => e.DepartmentId)
        .Select(e => new
        {
            DepartmentId = e.DepartmentId,
            DepartmentName = e.DepartmentName
        }).OrderBy(a => a.DepartmentName)
        .ToList();

        CommonHelper.BindDropDown(ddlDepartment, department, "DepartmentName", "DepartmentId", department.Count > 1 ? true : false, false);

        //var employees = context.Setup_Employee.Where(e => e.IsActive == true && (e.InchargeId == UserKey || IsSuperAdmin == true || (RoleCode == roleAdmin && e.CompanyId == CompanyId)))
        //    .OrderBy(e => e.EmployeeCode)
        //    .Select(e => new
        //    {
        //        EmployeeId = e.EmployeeId,
        //        Name = e.EmployeeCode + " - " + e.FirstName
        //    })
        //    .ToList();



        var LstGroup = context.Setup_UserAccessLocation.Where(a => a.IsActive == true && a.EmployeeId == UserKey)
                      .Select(a => new
                      {
                          GroupId = a.Setup_Location.Setup_Company.Setup_Group.GroupId,
                          GroupName = a.Setup_Location.Setup_Company.Setup_Group.GroupName,
                      })
                      .ToList().Distinct();
        CommonHelper.BindDropDown(ddlGroup, LstGroup, "GroupName", "GroupId", LstGroup.Count() > 1 ? true : false, false);

        ddlGroup_SelectedIndexChanged(null, null);

        var listDepartment = context.Setup_Department.Where(c => c.IsActive == true && c.CompanyId == CompanyId).OrderBy(c => c.DepartmentName).ToList();
        CommonHelper.BindDropDown(ddlDepartment, listDepartment, "DepartmentName", "DepartmentId", listDepartment.Count() > 1 ? true : false, false);

        int departmentId = Convert.ToInt32(ddlDepartment.SelectedValue);
        Base UserInfo = new Base();

        //var listEmplyee = context.Setup_Employee.Where(e => e.IsActive == true && e.DepartmentId == departmentId && (e.InchargeId == UserInfo.UserKey || UserInfo.IsSuperAdmin == true || (UserInfo.RoleCode == roleAdmin && e.CompanyId == UserInfo.CompanyId)))
        //    .OrderBy(e => e.FirstName)
        //    .Select(e => new
        //    {
        //        EmployeeId = e.EmployeeId,
        //        Name = e.FirstName + " - " + e.EmployeeCode
        //    })
        //    .ToList();
        ////.OrderBy("Name").ToList();
        //CommonHelper.BindDropDown(ddlEmployee, listEmplyee, "Name", "EmployeeId", true, false);
    }
    protected void ddlGroup_SelectedIndexChanged(object sender, EventArgs e)
    {
        int GroupId = Convert.ToInt32(ddlGroup.SelectedValue);
        var LstCompany = context.Setup_UserAccessLocation.Where(a => a.IsActive == true && a.EmployeeId == UserKey && a.Setup_Location.Setup_Company.GroupId == GroupId)
            .Select(a => new
            {
                CompanyId = a.Setup_Location.Setup_Company.CompanyId,
                CompanyName = a.Setup_Location.Setup_Company.CompanyName,

            })
            .ToList().Distinct();

        CommonHelper.BindDropDown(ddlCompany, LstCompany, "CompanyName", "CompanyId", true, false);
    }
    protected void ddlCompany_SelectedIndexChanged(object sender, EventArgs e)
    {
        int CompanyId = Convert.ToInt32(ddlCompany.SelectedValue);
        var LstLocation = context.Setup_UserAccessLocation.Where(a => a.IsActive == true && a.EmployeeId == UserKey && a.Setup_Location.CompanyId == CompanyId)
           .Select(a => new
           {
               LocationId = a.Setup_Location.LocationId,
               LocationName = a.Setup_Location.LocationName,

           })
           .ToList();
        CommonHelper.BindDropDown(ddlLocation, LstLocation, "LocationName", "LocationId", true, false);
        //ddlDepartment_SelectedIndexChanged(null, null);
    }
    protected void btnCancel_Click(object sender, EventArgs e)
    {

    }
    protected void btnSearch_Click(object sender, EventArgs e)
    {
        BindRepeater();
    }

    #region PAGING
    private void PagingHandler()
    {
        PagingAndSorting.ImgNext.Click += ImgNext_Click;
        PagingAndSorting.ImgPrevious.Click += ImgPrevious_Click;
        PagingAndSorting.DdlPage.SelectedIndexChanged += DdlPage_SelectedIndexChanged;
        PagingAndSorting.DdlPageSize.SelectedIndexChanged += DdlPageSize_SelectedIndexChanged;
    }

    void DdlPageSize_SelectedIndexChanged(object sender, EventArgs e)
    {
        BindRepeater();
    }
    void DdlPage_SelectedIndexChanged(object sender, EventArgs e)
    {
        BindRepeater();
    }
    void ImgNext_Click(object sender, ImageClickEventArgs e)
    {
        BindRepeater();
    }
    void ImgPrevious_Click(object sender, ImageClickEventArgs e)
    {
        BindRepeater();
    }
    #endregion

    private void BindRepeater()
    {
        try
        {
            try
            {
                int pageSize = 50;
                int pageNumber = 1;
                if (PagingAndSorting.DdlPageSize.SelectedValue.toInt() > 0)
                {
                    pageSize = PagingAndSorting.DdlPageSize.SelectedValue.toInt();
                }
                if (PagingAndSorting.DdlPage.Items.Count > 0)
                {
                    pageNumber = PagingAndSorting.DdlPage.SelectedValue.toInt();
                }

                int skip = pageNumber * pageSize - pageSize;


                List<TMS_Daily_Activity_Report_Result> Daily_Activity_rep = new List<TMS_Daily_Activity_Report_Result>();
                DateTime StartDate = Convert.ToDateTime(txtStartDate.Text);
                DateTime EndDate = Convert.ToDateTime(txtEndDate.Text);
                string Dep_ID = null; 
                string IsAdj="0" ;

                if (ddlDepartment.SelectedValue != "0")
                {
                    Dep_ID = ddlDepartment.SelectedValue;
                }

                if (ChbxIsAdjusted.Checked)
                {
                    IsAdj = ChbxIsAdjusted.Checked ? "1" : "0";
                }
                Daily_Activity_rep = context.TMS_Daily_Activity_Report(StartDate, EndDate,Dep_ID,IsAdj).ToList();
                rpt.DataSource = Daily_Activity_rep;
                rpt.DataBind();


                var List = Daily_Activity_rep.Skip(skip).Take(pageSize).ToList();
                rpt.DataSource = List;
                rpt.DataBind();
                PagingAndSorting.setPagingOptions(Daily_Activity_rep.Count());


                if (Daily_Activity_rep.Count > 0)
                {

                    //LB_Export_To_Excel.Visible = true;
                }
                else
                {
                    //LB_Export_To_Excel.Visible = false;
                }


            }
            catch (Exception ex)
            {
                //lblError.Visible = true;
                //lblError.InnerText = ex.Message;
                //divError.Attributes.Add("class", "validationSummary");
                //divError.Visible = true;
                divError.Visible = true;
                lblError.InnerText = ex.Message;
            }
        }
        catch (Exception ex)
        {

        }


    }
    protected void ddlLocation_SelectedIndexChanged(object sender, EventArgs e)
    {
        int CompanyID = CompanyId;
        if (ddlCompany.SelectedValue != "0")
        {
            CompanyID = Convert.ToInt32(ddlCompany.SelectedValue);
        }
        var listDepartment = context.Setup_Department.Where(c => c.IsActive == true && c.CompanyId == CompanyID).OrderBy(c => c.DepartmentName).ToList();
        CommonHelper.BindDropDown(ddlDepartment, listDepartment, "DepartmentName", "DepartmentId", listDepartment.Count() > 1 ? true : false, false);

    }
    protected void LB_Export_To_Excel_Click(object sender, EventArgs e)
    {
        try
        {
            List<TMS_Daily_Activity_Report_Result> Daily_Activity_rep = new List<TMS_Daily_Activity_Report_Result>();
            DateTime StartDate = Convert.ToDateTime(txtStartDate.Text);
            DateTime EndDate = Convert.ToDateTime(txtEndDate.Text);
            string Dep_ID = null; string IsAdj = null;

            if (ddlDepartment.SelectedValue != "0")
            {
                Dep_ID = ddlDepartment.SelectedValue;
            }

            IsAdj = ChbxIsAdjusted.Checked ? "1" : "0";
            Daily_Activity_rep = context.TMS_Daily_Activity_Report(StartDate, EndDate, Dep_ID, IsAdj).ToList();
            // rpt.DataSource = Daily_Activity_rep;
            // rpt.DataBind();

            GridView gv = new GridView();
            gv.DataSource = Daily_Activity_rep;
            gv.DataBind();
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=Daily_Activity_Report.xls");
            Response.ContentType = "application/vnd.ms-excel";
            Response.Charset = "";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            gv.RenderControl(htw);
            Response.Output.Write(sw.ToString());
            Response.Flush();
            Response.End();
        }
        catch (Exception ex)
        {
            lblError.Visible = true;
            lblError.InnerText = ex.Message;
            divError.Attributes.Add("class", "validationSummary");
            divError.Visible = true;
        }
    }

}